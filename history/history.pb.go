// Code generated by protoc-gen-go. DO NOT EDIT.
// source: history.proto

/*
Package history is a generated protocol buffer package.

It is generated from these files:
	history.proto

It has these top-level messages:
	Command
	Response
*/
package history

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Status int32

const (
	Status_OK  Status = 0
	Status_ERR Status = 1
)

var Status_name = map[int32]string{
	0: "OK",
	1: "ERR",
}
var Status_value = map[string]int32{
	"OK":  0,
	"ERR": 1,
}

func (x Status) String() string {
	return proto.EnumName(Status_name, int32(x))
}
func (Status) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Command struct {
	Hostname    string   `protobuf:"bytes,1,opt,name=hostname" json:"hostname,omitempty"`
	Timestamp   int64    `protobuf:"varint,2,opt,name=timestamp" json:"timestamp,omitempty"`
	Username    string   `protobuf:"bytes,3,opt,name=username" json:"username,omitempty"`
	Altusername string   `protobuf:"bytes,4,opt,name=altusername" json:"altusername,omitempty"`
	Cwd         string   `protobuf:"bytes,5,opt,name=cwd" json:"cwd,omitempty"`
	Oldpwd      string   `protobuf:"bytes,6,opt,name=oldpwd" json:"oldpwd,omitempty"`
	Command     []string `protobuf:"bytes,7,rep,name=command" json:"command,omitempty"`
	Exitcode    int64    `protobuf:"varint,8,opt,name=exitcode" json:"exitcode,omitempty"`
}

func (m *Command) Reset()                    { *m = Command{} }
func (m *Command) String() string            { return proto.CompactTextString(m) }
func (*Command) ProtoMessage()               {}
func (*Command) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Command) GetHostname() string {
	if m != nil {
		return m.Hostname
	}
	return ""
}

func (m *Command) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *Command) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *Command) GetAltusername() string {
	if m != nil {
		return m.Altusername
	}
	return ""
}

func (m *Command) GetCwd() string {
	if m != nil {
		return m.Cwd
	}
	return ""
}

func (m *Command) GetOldpwd() string {
	if m != nil {
		return m.Oldpwd
	}
	return ""
}

func (m *Command) GetCommand() []string {
	if m != nil {
		return m.Command
	}
	return nil
}

func (m *Command) GetExitcode() int64 {
	if m != nil {
		return m.Exitcode
	}
	return 0
}

type Response struct {
	Status Status `protobuf:"varint,1,opt,name=status,enum=history.Status" json:"status,omitempty"`
}

func (m *Response) Reset()                    { *m = Response{} }
func (m *Response) String() string            { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()               {}
func (*Response) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Response) GetStatus() Status {
	if m != nil {
		return m.Status
	}
	return Status_OK
}

func init() {
	proto.RegisterType((*Command)(nil), "history.Command")
	proto.RegisterType((*Response)(nil), "history.Response")
	proto.RegisterEnum("history.Status", Status_name, Status_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Historian service

type HistorianClient interface {
	// Sends a greeting
	GetCommand(ctx context.Context, in *Command, opts ...grpc.CallOption) (*Response, error)
}

type historianClient struct {
	cc *grpc.ClientConn
}

func NewHistorianClient(cc *grpc.ClientConn) HistorianClient {
	return &historianClient{cc}
}

func (c *historianClient) GetCommand(ctx context.Context, in *Command, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/history.Historian/GetCommand", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Historian service

type HistorianServer interface {
	// Sends a greeting
	GetCommand(context.Context, *Command) (*Response, error)
}

func RegisterHistorianServer(s *grpc.Server, srv HistorianServer) {
	s.RegisterService(&_Historian_serviceDesc, srv)
}

func _Historian_GetCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Command)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HistorianServer).GetCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/history.Historian/GetCommand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HistorianServer).GetCommand(ctx, req.(*Command))
	}
	return interceptor(ctx, in, info, handler)
}

var _Historian_serviceDesc = grpc.ServiceDesc{
	ServiceName: "history.Historian",
	HandlerType: (*HistorianServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCommand",
			Handler:    _Historian_GetCommand_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "history.proto",
}

func init() { proto.RegisterFile("history.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 268 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x91, 0xc1, 0x4e, 0xb4, 0x30,
	0x14, 0x85, 0x87, 0xe1, 0xff, 0x0b, 0x5c, 0xa3, 0xe2, 0x5d, 0x98, 0x3a, 0x71, 0x41, 0xd8, 0x48,
	0x5c, 0xcc, 0x62, 0x78, 0x01, 0x13, 0x63, 0x34, 0x71, 0x61, 0x52, 0x9f, 0xa0, 0x42, 0x93, 0x21,
	0x99, 0x52, 0x42, 0xef, 0x64, 0xf4, 0x71, 0x7d, 0x13, 0x43, 0xa1, 0xd5, 0x1d, 0xdf, 0x77, 0x72,
	0xc8, 0xe1, 0x02, 0xe7, 0xfb, 0xce, 0x92, 0x19, 0xbf, 0xb6, 0xc3, 0x68, 0xc8, 0x60, 0xb2, 0x60,
	0xf9, 0x1d, 0x41, 0xf2, 0x68, 0xb4, 0x96, 0x7d, 0x8b, 0x1b, 0x48, 0xf7, 0xc6, 0x52, 0x2f, 0xb5,
	0xe2, 0x51, 0x11, 0x55, 0x99, 0x08, 0x8c, 0xb7, 0x90, 0x51, 0xa7, 0x95, 0x25, 0xa9, 0x07, 0xbe,
	0x2e, 0xa2, 0x2a, 0x16, 0xbf, 0x62, 0x6a, 0x1e, 0xad, 0x1a, 0x5d, 0x33, 0x9e, 0x9b, 0x9e, 0xb1,
	0x80, 0x33, 0x79, 0xa0, 0x10, 0xff, 0x73, 0xf1, 0x5f, 0x85, 0x39, 0xc4, 0xcd, 0xa9, 0xe5, 0xff,
	0x5d, 0x32, 0x3d, 0xe2, 0x35, 0x30, 0x73, 0x68, 0x87, 0x53, 0xcb, 0x99, 0x93, 0x0b, 0x21, 0x87,
	0xa4, 0x99, 0xc7, 0xf2, 0xa4, 0x88, 0xab, 0x4c, 0x78, 0x9c, 0x16, 0xa8, 0xcf, 0x8e, 0x1a, 0xd3,
	0x2a, 0x9e, 0xba, 0x79, 0x81, 0xcb, 0x1a, 0x52, 0xa1, 0xec, 0x60, 0x7a, 0xab, 0xf0, 0x0e, 0x98,
	0x25, 0x49, 0x47, 0xeb, 0xbe, 0xf0, 0x62, 0x77, 0xb9, 0xf5, 0x87, 0x79, 0x77, 0x5a, 0x2c, 0xf1,
	0xfd, 0x0d, 0xb0, 0xd9, 0x20, 0x83, 0xf5, 0xdb, 0x6b, 0xbe, 0xc2, 0x04, 0xe2, 0x27, 0x21, 0xf2,
	0x68, 0xf7, 0x00, 0xd9, 0x8b, 0x2b, 0x75, 0xb2, 0xc7, 0x1a, 0xe0, 0x59, 0x91, 0x3f, 0x61, 0x1e,
	0x5e, 0xb7, 0x98, 0xcd, 0x55, 0x30, 0x7e, 0x43, 0xb9, 0xfa, 0x60, 0xee, 0x2f, 0xd4, 0x3f, 0x01,
	0x00, 0x00, 0xff, 0xff, 0x00, 0x93, 0xc6, 0xa8, 0x96, 0x01, 0x00, 0x00,
}
