# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import history_pb2 as history__pb2


class HistorianStub(object):
  """The greeting service definition.
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.GetCommand = channel.unary_unary(
        '/history.Historian/GetCommand',
        request_serializer=history__pb2.Command.SerializeToString,
        response_deserializer=history__pb2.Response.FromString,
        )


class HistorianServicer(object):
  """The greeting service definition.
  """

  def GetCommand(self, request, context):
    """Sends a greeting
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_HistorianServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'GetCommand': grpc.unary_unary_rpc_method_handler(
          servicer.GetCommand,
          request_deserializer=history__pb2.Command.FromString,
          response_serializer=history__pb2.Response.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'history.Historian', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
